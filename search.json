[{"path":[]},{"path":"https://hsbadr.github.io/bayesian/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://hsbadr.github.io/bayesian/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://hsbadr.github.io/bayesian/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://hsbadr.github.io/bayesian/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://hsbadr.github.io/bayesian/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement [INSERT CONTACT METHOD]. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://hsbadr.github.io/bayesian/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://hsbadr.github.io/bayesian/CODE_OF_CONDUCT.html","id":"1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://hsbadr.github.io/bayesian/CODE_OF_CONDUCT.html","id":"2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://hsbadr.github.io/bayesian/CODE_OF_CONDUCT.html","id":"3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://hsbadr.github.io/bayesian/CODE_OF_CONDUCT.html","id":"4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://hsbadr.github.io/bayesian/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.0, available https://www.contributor-covenant.org/version/2/0/ code_of_conduct.html. Community Impact Guidelines inspired Mozilla’s code conduct enforcement ladder. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https:// www.contributor-covenant.org/translations.","code":""},{"path":"https://hsbadr.github.io/bayesian/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to bayesian","title":"Contributing to bayesian","text":"outlines propose change bayesian. detailed info contributing , tidyverse packages, please see development contributing guide.","code":""},{"path":"https://hsbadr.github.io/bayesian/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to bayesian","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://hsbadr.github.io/bayesian/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to bayesian","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed).","code":""},{"path":"https://hsbadr.github.io/bayesian/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to bayesian","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"\", fork = TRUE). Install development dependences devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html.","code":""},{"path":"https://hsbadr.github.io/bayesian/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to bayesian","text":"New R code follow tidyverse style guide. can use styler package apply styles. Please don’t restyle code nothing PR. New C/C++ code follow Google style guide. can use clang-format apply styles. Please don’t restyle code nothing PR. use roxygen2, Markdown syntax, build documentation package. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://hsbadr.github.io/bayesian/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to bayesian","text":"Please note bayesian project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://hsbadr.github.io/bayesian/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 Hamada S. Badr badr@jhu.edu Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://hsbadr.github.io/bayesian/SUPPORT.html","id":null,"dir":"","previous_headings":"","what":"Getting help with bayesian","title":"Getting help with bayesian","text":"Thanks using bayesian! filing issue, places explore pieces put together make process smooth possible.","code":""},{"path":"https://hsbadr.github.io/bayesian/SUPPORT.html","id":"make-a-reprex","dir":"","previous_headings":"","what":"Make a reprex","title":"Getting help with bayesian","text":"Start making minimal reproducible example using reprex package. haven’t heard used reprex , ’re treat! Seriously, reprex make R-question-asking endeavors easier (pretty insane ROI five ten minutes ’ll take learn ’s ). additional reprex pointers, check Get help! section tidyverse site.","code":""},{"path":"https://hsbadr.github.io/bayesian/SUPPORT.html","id":"where-to-ask","dir":"","previous_headings":"","what":"Where to ask?","title":"Getting help with bayesian","text":"Armed reprex, next step figure ask. ’s question: start community.rstudio.com, /StackOverflow. people answer questions. ’s bug: ’re right place, file issue. ’re sure: let community help figure ! problem bug feature request, can easily return report . opening new issue, sure search issues pull requests make sure bug hasn’t reported /already fixed development version. default, search pre-populated :issue :open. can edit qualifiers (e.g. :pr, :closed) needed. example, ’d simply remove :open search issues repo, open closed.","code":""},{"path":"https://hsbadr.github.io/bayesian/SUPPORT.html","id":"what-happens-next","dir":"","previous_headings":"","what":"What happens next?","title":"Getting help with bayesian","text":"efficient possible, development R packages tends bursty, shouldn’t worry don’t get immediate response. Typically don’t look repo sufficient quantity issues accumulates, ’s burst intense activity focus efforts. makes development efficient avoids expensive context switching problems, cost taking longer get back . process makes good reprex particularly important might multiple months initial report start working . can’t reproduce bug, can’t fix !","code":""},{"path":"https://hsbadr.github.io/bayesian/articles/BugReports.html","id":"description","dir":"Articles","previous_headings":"","what":"Description","title":"Bug Reporting","text":"Provide clear concise description problem including warning error messages.","code":""},{"path":"https://hsbadr.github.io/bayesian/articles/BugReports.html","id":"reproduction","dir":"Articles","previous_headings":"","what":"Reproduction","title":"Bug Reporting","text":"Provide clean R script demonstrating issue necessary data files. Please include minimal reproducible example (AKA reprex). ’ve never heard reprex , start reading https://www.tidyverse.org/help/#reprex.","code":""},{"path":"https://hsbadr.github.io/bayesian/articles/BugReports.html","id":"environment","dir":"Articles","previous_headings":"","what":"Environment","title":"Bug Reporting","text":"Provide following information: OS Type: [e.g., Linux, macOS, Windows] OS Version: [e.g., macOS 11.3, Windows 10, Ubuntu 20.04] R Version: [e.g., 4.0, 4.1, 4.2] Stan Backend: [e.g., rstan cmdstanr] Version: [e.g., 0.0.3 development] Source: [e.g., binary source code] Repository: [e.g., CRAN, Bioconductor, GitHub, ]","code":""},{"path":"https://hsbadr.github.io/bayesian/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Hamada S. Badr. Author, maintainer. Paul-Christian Bürkner. Author.","code":""},{"path":"https://hsbadr.github.io/bayesian/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Hamada S. Badr Paul C. Bürkner (2021): bayesian: Bindings Bayesian TidyModels, _Comprehensive R Archive Network (CRAN)_. URL: https://hsbadr.github.io/bayesian/","code":"@Manual{bayesian-manual,   title = {bayesian: Bindings for Bayesian TidyModels},   author = {Hamada S. Badr and Paul C. Bürkner},   year = {2021},   journal = {Comprehensive R Archive Network (CRAN)},   url = {https://hsbadr.github.io/bayesian/},   doi = {10.5281/zenodo.6654386},   language = {English}, }"},{"path":"https://hsbadr.github.io/bayesian/index.html","id":"bindings-for-bayesian-tidymodels-","dir":"","previous_headings":"","what":"Bindings for Bayesian TidyModels","title":"Bindings for Bayesian TidyModels","text":"bayesian supports Bayesian modeling using brms/Stan parsnip/tidymodels.","code":""},{"path":"https://hsbadr.github.io/bayesian/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Bindings for Bayesian TidyModels","text":"stable version bayesian can installed CRAN using: development version bayesian can installed GitHub using:","code":"install.packages(\"bayesian\") install.packages(\"pak\") pak::pkg_install(\"hsbadr/bayesian\")"},{"path":"https://hsbadr.github.io/bayesian/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Bindings for Bayesian TidyModels","text":"details, get started bayesian.","code":"library(bayesian)  bayesian_mod <-   bayesian() |>   set_engine(\"brms\") |>   fit(     rating ~ treat + period + carry + (1 | subject),     data = inhaler   )  summary(bayesian_mod$fit)"},{"path":"https://hsbadr.github.io/bayesian/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Bindings for Bayesian TidyModels","text":"cite bayesian publications, please use: Hamada S. Badr Paul C. Bürkner (2021): bayesian: Bindings Bayesian TidyModels, Comprehensive R Archive Network (CRAN). URL: https://hsbadr.github.io/bayesian/.","code":"citation(\"bayesian\")"},{"path":"https://hsbadr.github.io/bayesian/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"Bindings for Bayesian TidyModels","text":"project released Contributor Code Conduct. contributing project, agree abide terms. questions discussions tidymodels packages, modeling, machine learning, please post RStudio Community. think encountered bug, please submit issue. Either way, learn create share reprex (minimal, reproducible example), clearly communicate code. Check details contributing guidelines tidymodels packages get help.","code":""},{"path":"https://hsbadr.github.io/bayesian/reference/bayesian.html","id":null,"dir":"Reference","previous_headings":"","what":"General Interface for Bayesian TidyModels — bayesian","title":"General Interface for Bayesian TidyModels — bayesian","text":"bayesian() way generate specification model fitting allows model created using Stan via brms package R.","code":""},{"path":"https://hsbadr.github.io/bayesian/reference/bayesian.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"General Interface for Bayesian TidyModels — bayesian","text":"","code":"bayesian(   mode = \"regression\",   engine = \"brms\",   formula.override = NULL,   family = NULL,   prior = NULL,   sample_prior = NULL,   knots = NULL,   stanvars = NULL,   fit = NULL,   init = NULL,   chains = NULL,   iter = NULL,   warmup = NULL,   thin = NULL,   cores = NULL,   threads = NULL,   algorithm = NULL,   backend = NULL,   stan_args = NULL,   control = NULL,   save_pars = NULL,   save_model = NULL,   file = NULL,   file_refit = NULL,   normalize = NULL,   future = NULL,   seed = NULL,   silent = NULL )  # S3 method for bayesian update(   object,   parameters = NULL,   formula.override = NULL,   family = NULL,   prior = NULL,   sample_prior = NULL,   knots = NULL,   stanvars = NULL,   fit = NULL,   init = NULL,   chains = NULL,   iter = NULL,   warmup = NULL,   thin = NULL,   cores = NULL,   threads = NULL,   algorithm = NULL,   backend = NULL,   stan_args = NULL,   control = NULL,   save_pars = NULL,   save_model = NULL,   file = NULL,   file_refit = NULL,   normalize = NULL,   future = NULL,   seed = NULL,   silent = NULL,   fresh = FALSE,   ... )  bayesian_fit(formula, data, ...)  bayesian_formula(formula, ...)  bayesian_terms(formula, ...)  bayesian_family(family, ...)  bayesian_predict(object, ...)  bayesian_write(object, file)  bayesian_read(file)"},{"path":"https://hsbadr.github.io/bayesian/reference/bayesian.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"General Interface for Bayesian TidyModels — bayesian","text":"mode single character string prediction outcome mode. Possible values model \"unknown\", \"regression\", \"classification\". engine single character string specifying computational engine use fitting. Possible engines listed . default model \"brms\". formula.override Overrides formula; details see brmsformula. family description response distribution link function used model. can family function, call family function character string naming family. Every family function link argument allowing specify link function applied response variable. specified, default links used. details supported families see brmsfamily. default, linear gaussian model applied. multivariate models, family might also list families. prior One brmsprior objects created set_prior related functions combined using c method + operator. See also  get_prior help. sample_prior Indicate draws priors drawn additionally posterior draws. Options \"\" (default), \"yes\", \"\". Among others, draws can used calculate Bayes factors point hypotheses via hypothesis. Please note improper priors sampled, including default improper priors used brm. See set_prior set (proper) priors. Please also note prior draws overall intercept obtained default technical reasons. See brmsformula obtain prior draws intercept. sample_prior set \"\", draws drawn solely priors ignoring likelihood, allows among others generate draws prior predictive distribution. case, parameters must proper priors. knots Optional list containing user specified knot values used basis construction smoothing terms. See gamm details. stanvars optional stanvars object generated function stanvar define additional variables use Stan's program blocks. fit instance S3 class brmsfit derived previous fit; defaults NA. fit class brmsfit, compiled model associated fitted result re-used arguments modifying model code data ignored. recommended use argument directly, call update method, instead. init Initial values sampler. NULL (default) \"random\", Stan randomly generate initial values parameters reasonable range. 0, parameters initialized zero unconstrained space. option sometimes useful certain families, happens default random initial values cause draws essentially constant. Generally, setting init = 0 worth try, chains initialize behave well. Alternatively, init can list lists containing initial values, function (function name) generating initial values. latter options mainly implemented internal testing available users necessary. specifying initial values using list function currently parameter names must correspond names used generated Stan code (names used R). details specifying initial values can consult documentation selected backend. chains Number Markov chains (defaults 4). iter Number total iterations per chain (including warmup; defaults 2000). warmup positive integer specifying number warmup (aka burnin) iterations. also specifies number iterations used stepsize adaptation, warmup draws used inference. number warmup larger iter default iter/2. thin Thinning rate. Must positive integer. Set thin > 1 save memory computation time iter large. cores Number cores use executing chains parallel, defaults 1 recommend setting mc.cores option many processors hardware RAM allow (number chains). non-Windows OS non-interactive R sessions, forking used instead PSOCK clusters. threads Number threads use within-chain parallelization. control threading process, threads may also brmsthreads object created threading. Within-chain parallelization experimental! recommend use experienced Stan's reduce_sum function slow running model sped means. Can set globally current R session via \"brms.threads\" option (see options). algorithm Character string naming estimation approach use. Options \"sampling\" MCMC (default), \"meanfield\" variational inference independent normal distributions, \"fullrank\" variational inference multivariate normal distribution, \"fixed_param\" sampling fixed parameter values. Can set globally current R session via \"brms.algorithm\" option (see options). backend Character string naming package use backend fitting Stan model. Options \"rstan\" (default) \"cmdstanr\". Can set globally current R session via \"brms.backend\" option (see options). Details rstan cmdstanr packages available https://mc-stan.org/rstan/ https://mc-stan.org/cmdstanr/, respectively. Additionally \"mock\" backend available make testing brms packages depend easier. \"mock\" backend actually fitting, checks generated Stan code correctness returns whatever passed additional mock_fit argument result fit. stan_args list extra arguments Stan. control named list parameters control sampler's behavior. defaults NULL default values used. important control parameters discussed 'Details' section . comprehensive overview see stan. save_pars object generated save_pars controlling parameters saved model. argument impact model fitting . save_model Either NULL character string. latter case, model's Stan code saved via cat text file named string supplied save_model. file character string file path brmsfit object saved via saveRDS. file_refit Modifies fit stored via file parameter re-used. Can set globally current R session via \"brms.file_refit\" option (see options). \"never\" (default) fit always loaded exists fitting skipped. \"always\" model always refitted. set \"on_change\", brms refit model model, data algorithm passed Stan differ stored file. also covers changes priors, sample_prior, stanvars, covariance structure, etc. believe false positive, can use brmsfit_needs_refit see refit deemed necessary. Refit triggered changes additional parameters fit (e.g., initial values, number iterations, control arguments, ...). known limitation refit triggered within-chain parallelization switched /. normalize Logical. Indicates whether normalization constants included Stan code (defaults TRUE). Setting FALSE requires Stan version >= 2.25 work. FALSE, sampling efficiency may increased post processing functions bridge_sampler available. Can controlled globally current R session via `brms.normalize` option. future Logical; TRUE, future package used parallel execution chains argument cores ignored. Can set globally current R session via \"future\" option. execution type controlled via plan (see examples section ). seed seed random number generation make results reproducible. NA (default), Stan set seed randomly. silent Verbosity level 0 2. 1 (default), informational messages compiler sampler suppressed. 2, even messages suppressed. actual sampling progress still printed. Set refresh = 0 turn well. using backend = \"rstan\" can also set open_progress = FALSE prevent opening additional progress bars. object Bayesian model specification. parameters 1-row tibble named list main parameters update. individual arguments used, supersede values parameters. Also, using engine arguments object result error. fresh logical whether arguments modified -place replaced wholesale. ... arguments passed internal functions. formula object class formula, brmsformula, mvbrmsformula (one can coerced classes): symbolic description model fitted. details model specification explained brmsformula. data object class data.frame (one can coerced class) containing data variables used model.","code":""},{"path":"https://hsbadr.github.io/bayesian/reference/bayesian.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"General Interface for Bayesian TidyModels — bayesian","text":"updated model specification.","code":""},{"path":"https://hsbadr.github.io/bayesian/reference/bayesian.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"General Interface for Bayesian TidyModels — bayesian","text":"arguments converted specific names time model fit. options argument can set using set_engine(). left defaults (NULL), values taken underlying model functions. parameters need modified, update() can used lieu recreating object scratch. data given function saved used determine mode model. bayesian(), possible modes \"regression\" \"classification\". model can created fit() function using following engines: brms:  \"brms\"","code":""},{"path":"https://hsbadr.github.io/bayesian/reference/bayesian.html","id":"engine-details","dir":"Reference","previous_headings":"","what":"Engine Details","title":"General Interface for Bayesian TidyModels — bayesian","text":"Engines may pre-set default arguments executing model fit call. type model, template fit calls :","code":"bayesian() |>   set_engine(\"brms\") |>   translate() ## Bayesian Model Specification (regression) ##  ## Computational engine: brms  ##  ## Model fit template: ## bayesian::bayesian_fit(formula = missing_arg(), data = missing_arg(),  ##     weights = missing_arg())"},{"path":[]},{"path":"https://hsbadr.github.io/bayesian/reference/bayesian.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"General Interface for Bayesian TidyModels — bayesian","text":"","code":"bayesian() #> Bayesian Model Specification (regression) #>  #> Computational engine: brms  #>   show_model_info(\"bayesian\") #> Information for `bayesian` #>  modes: unknown, classification, regression  #>  #>  engines:  #>    classification: brms¹ #>    regression:     brms¹ #>  #> ¹The model can use case weights. #>  #>  arguments:  #>    brms:  #>       formula.override --> formula.override #>       family           --> family #>       prior            --> prior #>       sample_prior     --> sample_prior #>       knots            --> knots #>       stanvars         --> stanvars #>       fit              --> fit #>       init             --> init #>       chains           --> chains #>       iter             --> iter #>       warmup           --> warmup #>       thin             --> thin #>       cores            --> cores #>       threads          --> threads #>       algorithm        --> algorithm #>       backend          --> backend #>       stan_args        --> stan_args #>       control          --> control #>       save_pars        --> save_pars #>       save_model       --> save_model #>       file             --> file #>       file_refit       --> file_refit #>       normalize        --> normalize #>       future           --> future #>       seed             --> seed #>       silent           --> silent #>  #>  fit modules: #>  engine           mode #>    brms classification #>    brms     regression #>  #>  prediction modules: #>              mode engine                                        methods #>    classification   brms class, conf_int, pred_int, prob, quantile, raw #>        regression   brms     conf_int, numeric, pred_int, quantile, raw #>   bayesian(mode = \"classification\") #> Bayesian Model Specification (classification) #>  #> Computational engine: brms  #>  bayesian(mode = \"regression\") #> Bayesian Model Specification (regression) #>  #> Computational engine: brms  #>  if (FALSE) { bayesian_mod <-   bayesian() |>   set_engine(\"brms\") |>   fit(     rating ~ treat + period + carry + (1 | subject),     data = inhaler   )  summary(bayesian_mod$fit) }   model <- bayesian(init = \"random\") model #> Bayesian Model Specification (regression) #>  #> Main Arguments: #>   init = random #>  #> Computational engine: brms  #>  update(model, init = \"0\") #> Bayesian Model Specification (regression) #>  #> Main Arguments: #>   init = 0 #>  #> Computational engine: brms  #>  update(model, init = \"0\", fresh = TRUE) #> Bayesian Model Specification (regression) #>  #> Main Arguments: #>   init = 0 #>  #> Computational engine: brms  #>"}]
