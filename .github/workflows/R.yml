---
# title: 'Github Actions workflow to check, build, and release R packages'
# author:
#   - Hamada S. Badr:
#     email: badr@jhu.edu
#     institute: Johns Hopkins University
#     correspondence: true
# date: "16 January 2021"

# yamllint disable rule:line-length

name: R

'on':
  push:
    branches:
      - '*'
    tags:
      - '*'
  pull_request:
    branches:
      - '*'
  schedule:
    - cron: '0 0 * * 0'
  workflow_dispatch:
    inputs:
      release:
        description: 'Create a new release?'
        required: false
        default: false

jobs:
  initiate:
    name: Initiate R workflow
    if: "! contains(github.event.head_commit.message, '[ci skip]')"
    runs-on: Ubuntu-20.04
    timeout-minutes: 60
    outputs:
      pkg_name: ${{ steps.pkg_info.outputs.pkg_name }}
      pkg_version: ${{ steps.pkg_info.outputs.pkg_version }}
      pkg_sha: ${{ steps.pkg_info.outputs.pkg_sha }}

    strategy:
      fail-fast: true

    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Check out repository
        uses: actions/checkout@main
        with:
          fetch-depth: 1
          submodules: true

      - name: Get package information
        id: pkg_info
        run: |
          set -x
          export PKG_NAME="$(grep '^Package' DESCRIPTION | sed 's/^[^:]*://g' | xargs)"
          export PKG_VERSION="$(grep '^Version' DESCRIPTION | sed 's/^[^:]*://g' | xargs)"
          export PKG_SHA="$(git rev-parse --short HEAD | sed 's/^[^:]*://g' | xargs)"
          echo "::set-output name=pkg_name::$PKG_NAME"
          echo "::set-output name=pkg_version::$PKG_VERSION"
          echo "::set-output name=pkg_sha::$PKG_SHA"
        shell: bash

  check:
    name: R-${{ matrix.r }} on ${{ matrix.os }}
    if: "! contains(github.event.head_commit.message, '[ci skip]')"
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60

    needs: [initiate]

    strategy:
      fail-fast: true
      matrix:
        r: ['devel', 'release', 'oldrel']
        os: ['Ubuntu-20.04', 'macOS-10.15', 'Windows-2019']

    env:
      NOT_CRAN: true
      R_REMOTES_NO_ERRORS_FROM_WARNINGS: true
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Check out repository
        uses: actions/checkout@main
        with:
          fetch-depth: 1
          submodules: true

      - name: Set up R environment
        uses: r-lib/actions/setup-r@master
        with:
          r-version: ${{ matrix.r }}

      - name: Set up Pandoc
        uses: r-lib/actions/setup-pandoc@master

      - name: Set up TinyTeX
        uses: r-lib/actions/setup-tinytex@master

      - name: Query R package dependencies
        run: |
          install.packages('remotes')
          saveRDS(remotes::dev_package_deps(dependencies = TRUE), ".github/depends.Rds", version = 2)
          writeLines(sprintf("R-%i.%i", getRversion()$major, getRversion()$minor), ".github/R-version")
        shell: Rscript {0}

      - name: Cache R packages
        if: runner.os != 'Windows'
        uses: actions/cache@main
        with:
          path: ${{ env.R_LIBS_USER }}
          key: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-${{ hashFiles('.github/depends.Rds') }}
          restore-keys: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-

      - name: Set up system environment for macOS
        if: runner.os == 'macOS'
        run: |
          set -x
          brew install curl || true
          brew install harfbuzz fribidi || true
          brew install git || true
          brew install glpk || true
          brew install icu4c || true
          brew install libgit2 || true
          brew install libpng || true
          brew install libtiff || true
          brew install libxml2 || true
          brew install make || true
          brew install netcdf || true
          brew install open-mpi || true
          brew install pandoc || true
          command -v gfortran >&/dev/null 2>&1 || ln -sv /usr/local/bin/gfortran-8 /usr/local/bin/gfortran ; ln -sv /usr/local/lib/gcc/8/* /usr/local/lib/ || true
        shell: bash

      - name: Set up system environment for Windows
        if: runner.os == 'Windows'
        run: |
          $ErrorActionPreference = 'SilentlyContinue'
          echo "C:/rtools40/usr/bin;C:/rtools40/mingw64/bin" | Out-File -Append -FilePath $env:GITHUB_PATH -Encoding utf8
          pacman -Syu mingw-w64-x86_64-make --noconfirm
          g++ --version
          Get-Command g++ | Select-Object -ExpandProperty Definition
          mingw32-make --version
          Get-Command mingw32-make | Select-Object -ExpandProperty Definition
        shell: powershell

      - name: Set up system environment for Linux
        if: runner.os == 'Linux'
        run: |
          set -x
          sudo apt-get install -y clang-format || true
          sudo apt-get install -y git || true
          sudo apt-get install -y libcurl4-openssl-dev || true
          sudo apt-get install -y libgit2-dev || true
          sudo apt-get install -y libglpk-dev || true
          sudo apt-get install -y libharfbuzz-dev libfribidi-dev || true
          sudo apt-get install -y libicu-dev || true
          sudo apt-get install -y libnetcdf-dev libnetcdff-dev || true
          sudo apt-get install -y libpng-dev || true
          sudo apt-get install -y libtiff-dev || true
          sudo apt-get install -y libxml2-dev || true
          sudo apt-get install -y make || true
          sudo apt-get install -y openmpi-bin openmpi-common libopenmpi-dev || true
          sudo apt-get install -y pandoc || true
        shell: bash

      - name: Install R package dependencies
        run: |
          remotes::install_deps(dependencies = TRUE)
          remotes::install_cran("covr")
          remotes::install_cran("curl")
          remotes::install_cran("devtools")
          remotes::install_cran("htmltools")
          remotes::install_cran("lintr")
          remotes::install_cran("pkgdown")
          remotes::install_cran("rcmdcheck")
          remotes::install_cran("rmarkdown")
          remotes::install_cran("roxygen2")
          remotes::install_cran("sessioninfo")
          remotes::install_cran("styler")
          remotes::install_local(".")
        shell: Rscript {0}

      - name: Print R session information
        run: |
          options(width = 100)
          pkgs <- installed.packages()[, "Package"]
          sessioninfo::session_info(pkgs, include_base = TRUE)
        shell: Rscript {0}

      - name: Style and format R/C/C++ code
        if: success() && matrix.os == 'Ubuntu-20.04' && matrix.r == 'devel'
        run: |
          set -x
          Rscript -e 'styler::style_pkg()'
          find . -type f \( -name 'DESCRIPTION' -name "*.R" -o -name "*.stan" \) -exec sed -i -e 's/[ \t]*$//' {} \; || true
          find . -type f \( -name '*.h' -o -name '*.hpp' -o -name '*.c' -o -name '*.cc' -o -name '*.cpp' -o -name '*.cxx' \) -exec sed -i -e 's/[ \t]*$//' {} \; || true
          find . -type f \( -name '*.h' -o -name '*.hpp' -o -name '*.c' -o -name '*.cc' -o -name '*.cpp' -o -name '*.cxx' \) -exec clang-format -style=Google --verbose -i {} \; || true
        shell: bash

      - name: Render documents
        if: success() && matrix.os == 'Ubuntu-20.04' && matrix.r == 'devel'
        run: |
          if (file.exists("README.Rmd")) rmarkdown::render("README.Rmd", output_format = "md_document")
          roxygen2::roxygenize()
        shell: Rscript {0}

      - name: Commit changes
        if: success() && matrix.os == 'Ubuntu-20.04' && matrix.r == 'devel'
        run: |
          set -x
          git config --local user.email "actions@github.com"
          git config --local user.name "GitHub Actions"
          find . -type f \( -name 'DESCRIPTION' -name "*.R" -o -name "*.stan" \) -exec git add {} \; || true
          git commit -m 'Formatting R code using styler' || echo 'No changes to commit'
          find . -type f \( -name '*.h' -o -name '*.hpp' -o -name '*.c' -o -name '*.cc' -o -name '*.cpp' -o -name '*.cxx' \) -exec git add {} \; || true
          git commit -m 'Formatting C/C++ code using clang-format' || echo 'No changes to commit'
          git add README.md NAMESPACE man/\* || true
          git commit -m 'Roxygenize and render documents' || echo 'No changes to commit'
          git push origin || echo "No changes to commit"
        shell: bash

      - name: Push changes to pull request
        if: success() && matrix.os == 'Ubuntu-20.04' && matrix.r == 'devel' && github.event.issue.pull_request
        uses: r-lib/actions/pr-push@master
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Analyze R code
        if: success() && matrix.os == 'Ubuntu-20.04' && matrix.r == 'devel'
        run: |
          lintr::lint_package()
        shell: Rscript {0}

      - name: Run test coverage
        if: success() && matrix.os == 'Ubuntu-20.04' && matrix.r == 'devel'
        run: |
          covr::codecov(type = "all", line_exclusions = NULL, function_exclusions = NULL)
        shell: Rscript {0}

      - name: Deploy website
        if: success() && matrix.os == 'Ubuntu-20.04' && matrix.r == 'devel'
        run: |
          set -x
          git config --local user.email "actions@github.com"
          git config --local user.name "GitHub Actions"
          Rscript -e 'pkgdown::deploy_to_branch(new_process = FALSE)'
        shell: bash

      - name: R CMD check
        if: success()
        env:
          _R_CHECK_CRAN_INCOMING_: false
          _R_CHECK_CRAN_INCOMING_REMOTE_: false
          _R_CHECK_DONTTEST_EXAMPLES_: false
        run: |
          rcmdcheck::rcmdcheck(args = c("--no-manual", "--as-cran"), error_on = "warning", check_dir = "check")
        shell: Rscript {0}

      - name: Show testthat output
        if: always()
        run: |
          set -x
          find check -name 'testthat.Rout*' -exec cat '{}' \; || true
        shell: bash

      - name: Upload check results
        if: failure()
        uses: actions/upload-artifact@main
        with:
          name: ${{ runner.os }}-r${{ matrix.r }}-results
          path: check

      - name: Build packages
        if: success()
        run: |
          src <- pkgbuild::build(".", dest_path = tempdir(), vignettes = FALSE, manual = FALSE, binary = FALSE)
          bin <- pkgbuild::build(".", dest_path = tempdir(), vignettes = FALSE, manual = FALSE, binary = TRUE)
          dir.create("build")
          file.copy(c(src, bin), "build")
        shell: Rscript {0}

      - name: Upload source package
        if: matrix.os == 'Ubuntu-20.04' && matrix.r == 'devel'
        uses: actions/upload-artifact@main
        with:
          name: ${{ needs.initiate.outputs.pkg_name }}_${{ needs.initiate.outputs.pkg_version }}.tar.gz
          path: build/${{ needs.initiate.outputs.pkg_name }}_${{ needs.initiate.outputs.pkg_version }}.tar.gz

      - name: Upload macOS binary package
        if: runner.os == 'macOS'
        uses: actions/upload-artifact@main
        with:
          name: ${{ needs.initiate.outputs.pkg_name }}_${{ needs.initiate.outputs.pkg_version }}_${{ matrix.r }}.tgz
          path: build/${{ needs.initiate.outputs.pkg_name }}_${{ needs.initiate.outputs.pkg_version }}.tgz

      - name: Upload Windows binary package
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@main
        with:
          name: ${{ needs.initiate.outputs.pkg_name }}_${{ needs.initiate.outputs.pkg_version }}_${{ matrix.r }}.zip
          path: build/${{ needs.initiate.outputs.pkg_name }}_${{ needs.initiate.outputs.pkg_version }}.zip

  release:
    name: Create release
    if: startsWith(github.event.head_commit.message, '[release]') || github.event.inputs.release == 'true'
    runs-on: Ubuntu-20.04
    timeout-minutes: 60
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}

    needs: [initiate, check]

    strategy:
      fail-fast: true

    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Create release
        if: success()
        id: create_release
        uses: actions/create-release@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.initiate.outputs.pkg_version }}
          release_name: ${{ needs.initiate.outputs.pkg_name }} ${{ needs.initiate.outputs.pkg_version }}
          body: |
            Check changes in [NEWS.md](NEWS.md).
          draft: false
          prerelease: false

  upload-src:
    name: Upload source package
    if: startsWith(github.event.head_commit.message, '[release]') || github.event.inputs.release == 'true'
    runs-on: Ubuntu-20.04
    timeout-minutes: 60

    needs: [initiate, check, release]

    strategy:
      fail-fast: true

    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Download source package (artifacts)
        uses: actions/download-artifact@main
        with:
          name: ${{ needs.initiate.outputs.pkg_name }}_${{ needs.initiate.outputs.pkg_version }}.tar.gz
          path: artifacts

      - name: List downloaded artifacts
        run: |
          ls -R artifacts
        shell: bash

      - name: Upload release asset for source package
        uses: actions/upload-release-asset@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: artifacts/${{ needs.initiate.outputs.pkg_name }}_${{ needs.initiate.outputs.pkg_version }}.tar.gz
          asset_name: ${{ needs.initiate.outputs.pkg_name }}_${{ needs.initiate.outputs.pkg_version }}.tar.gz
          asset_content_type: application/gzip

  upload-bin:
    name: Upload R-${{ matrix.r }} binaries
    if: startsWith(github.event.head_commit.message, '[release]') || github.event.inputs.release == 'true'
    runs-on: Ubuntu-20.04
    timeout-minutes: 60

    needs: [initiate, check, release]

    strategy:
      fail-fast: true
      matrix:
        r: ['devel', 'release', 'oldrel']

    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Download all packages (artifacts)
        uses: actions/download-artifact@main
        with:
          path: artifacts

      - name: List downloaded artifacts
        run: |
          ls -R artifacts
        shell: bash

      - name: Upload release asset for macOS binary package
        uses: actions/upload-release-asset@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: artifacts/${{ needs.initiate.outputs.pkg_name }}_${{ needs.initiate.outputs.pkg_version }}_${{ matrix.r }}.tgz/${{ needs.initiate.outputs.pkg_name }}_${{ needs.initiate.outputs.pkg_version }}.tgz
          asset_name: ${{ needs.initiate.outputs.pkg_name }}_${{ needs.initiate.outputs.pkg_version }}_${{ matrix.r }}.tgz
          asset_content_type: application/gzip

      - name: Upload release asset for Windows binary package
        uses: actions/upload-release-asset@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: artifacts/${{ needs.initiate.outputs.pkg_name }}_${{ needs.initiate.outputs.pkg_version }}_${{ matrix.r }}.zip/${{ needs.initiate.outputs.pkg_name }}_${{ needs.initiate.outputs.pkg_version }}.zip
          asset_name: ${{ needs.initiate.outputs.pkg_name }}_${{ needs.initiate.outputs.pkg_version }}_${{ matrix.r }}.zip
          asset_content_type: application/zip
