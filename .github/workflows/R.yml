---
# title: 'Github Actions workflow to check, build, and release R packages'
# author:
#   - Hamada S. Badr:
#     email: badr@jhu.edu
#     institute: Johns Hopkins University
#     correspondence: true
# date: "12 August 2021"

# yamllint disable rule:line-length

name: R

'on':
  push:
    branches:
      - '*'
    tags:
      - '*'
  pull_request:
    branches:
      - '*'
  schedule:
    - cron: '0 12 * * 1'
  workflow_dispatch:
    inputs:
      release:
        description: 'Create a new release?'
        required: false
        default: false
      revdep:
        description: 'Check reverse dependencies?'
        required: false
        default: false

jobs:
  initiate:
    name: Initiate R workflow
    if: "! contains(github.event.head_commit.message, '[ci skip]')"
    runs-on: Ubuntu-20.04
    timeout-minutes: 360
    outputs:
      pkg_name: ${{ steps.pkg_info.outputs.pkg_name }}
      pkg_version: ${{ steps.pkg_info.outputs.pkg_version }}
      pkg_sha: ${{ steps.pkg_info.outputs.pkg_sha }}
      r_devel: ${{ steps.r_info.outputs.r_devel }}
      r_release: ${{ steps.r_info.outputs.r_release }}
      r_oldrel: ${{ steps.r_info.outputs.r_oldrel }}
      os_linux: ${{ steps.mat_info.outputs.os_linux }}
      os_macos: ${{ steps.mat_info.outputs.os_macos }}
      os_windows: ${{ steps.mat_info.outputs.os_windows }}

    strategy:
      fail-fast: true

    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Check out repository
        uses: actions/checkout@main
        with:
          fetch-depth: 1
          submodules: true

      - name: Set up package information
        id: pkg_info
        run: |
          set -x
          export PKG_NAME="$(grep '^Package' DESCRIPTION | sed 's/^[^:]*://g' | xargs)"
          export PKG_VERSION="$(grep '^Version' DESCRIPTION | sed 's/^[^:]*://g' | xargs)"
          export PKG_SHA="$(git rev-parse --short HEAD | sed 's/^[^:]*://g' | xargs)"
          echo "::set-output name=pkg_name::$PKG_NAME"
          echo "::set-output name=pkg_version::$PKG_VERSION"
          echo "::set-output name=pkg_sha::$PKG_SHA"
        shell: bash

      - name: Set up R information
        id: r_info
        run: |
          set -x
          echo "::set-output name=r_devel::devel"
          echo "::set-output name=r_release::release"
          echo "::set-output name=r_oldrel::oldrel"
        shell: bash

      - name: Set up OS information
        id: mat_info
        run: |
          set -x
          echo "::set-output name=os_linux::Ubuntu-20.04"
          echo "::set-output name=os_macos::macOS-10.15"
          echo "::set-output name=os_windows::Windows-2019"
        shell: bash

  check:
    name: Check R-${{ matrix.r }} | ${{ matrix.os }}
    if: "! contains(github.event.head_commit.message, '[ci skip]')"
    runs-on: ${{ matrix.os }}
    timeout-minutes: 360

    needs: [initiate]

    strategy:
      fail-fast: true
      matrix:
        r:
          - ${{ needs.initiate.outputs.r_release }}
          - ${{ needs.initiate.outputs.r_oldrel }}
        os:
          - ${{ needs.initiate.outputs.os_linux }}
          - ${{ needs.initiate.outputs.os_macos }}
          - ${{ needs.initiate.outputs.os_windows }}
        include:
          - r: ${{ needs.initiate.outputs.r_devel }}
            os: ${{ needs.initiate.outputs.os_linux }}

    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Check out repository
        uses: actions/checkout@main
        with:
          fetch-depth: 1
          submodules: true

      - name: Set up R environment
        uses: r-lib/actions/setup-r@master
        with:
          r-version: ${{ matrix.r }}
          rtools-version: '40'
          Ncpus: '1'
          remove-openmp-macos: true
          http-user-agent: 'default'
          install-r: true
          windows-path-include-mingw: true
          update-rtools: true
          use-public-rspm: true
          extra-repositories: ''

      - name: Set up Pandoc
        uses: r-lib/actions/setup-pandoc@master

      - name: Set up TinyTeX
        uses: r-lib/actions/setup-tinytex@master

      - name: Set up system environment (Linux)
        if: runner.os == 'Linux'
        run: |
          set -x
          sudo apt-get install -y automake || true
          sudo apt-get install -y clang-format || true
          sudo apt-get install -y cmake || true
          sudo apt-get install -y git || true
          sudo apt-get install -y libarchive-dev || true
          sudo apt-get install -y libcurl4-openssl-dev || true
          sudo apt-get install -y libgit2-dev || true
          sudo apt-get install -y libglpk-dev || true
          sudo apt-get install -y libgmp-dev || true
          sudo apt-get install -y libharfbuzz-dev libfribidi-dev || true
          sudo apt-get install -y libicu-dev || true
          sudo apt-get install -y libnetcdf-dev libnetcdff-dev || true
          sudo apt-get install -y libpng-dev || true
          sudo apt-get install -y libtiff-dev || true
          sudo apt-get install -y libxml2-dev || true
          sudo apt-get install -y make || true
          sudo apt-get install -y openmpi-bin openmpi-common libopenmpi-dev || true
          sudo apt-get install -y pandoc || true
        shell: bash

      - name: Set up system environment (macOS)
        if: runner.os == 'macOS'
        run: |
          set -x
          rm -f /usr/local/bin/gfortran || true
          brew reinstall --force --verbose automake || true
          brew reinstall --force --verbose cmake || true
          brew reinstall --force --verbose curl || true
          brew reinstall --force --verbose harfbuzz fribidi || true
          brew reinstall --force --verbose gcc@8 || true
          brew reinstall --force --verbose git || true
          brew reinstall --force --verbose glpk || true
          brew reinstall --force --verbose gmp || true
          brew reinstall --force --verbose icu4c || true
          brew reinstall --force --verbose libarchive || true
          brew reinstall --force --verbose libgit2 || true
          brew reinstall --force --verbose libpng || true
          brew reinstall --force --verbose libtiff || true
          brew reinstall --force --verbose libxml2 || true
          brew reinstall --force --verbose make || true
          brew reinstall --force --verbose netcdf || true
          brew reinstall --force --verbose open-mpi || true
          brew reinstall --force --verbose --cask xquartz || true
        shell: bash

      - name: Set up system environment (Windows)
        if: runner.os == 'Windows'
        run: |
          $ErrorActionPreference = 'SilentlyContinue'
          pacman -Syu --noconfirm mingw-w64-i686-cmake
          pacman -Syu --noconfirm mingw-w64-i686-curl
          pacman -Syu --noconfirm mingw-w64-i686-glpk
          pacman -Syu --noconfirm mingw-w64-i686-gmp
          pacman -Syu --noconfirm mingw-w64-i686-libxml2
          pacman -Syu --noconfirm mingw-w64-i686-libpng
          pacman -Syu --noconfirm mingw-w64-i686-libuv
          pacman -Syu --noconfirm mingw-w64-i686-make
          pacman -Syu --noconfirm mingw-w64-i686-netcdf
          pacman -Syu --noconfirm mingw-w64-i686-nlopt
          pacman -Syu --noconfirm mingw-w64-x86_64-cmake
          pacman -Syu --noconfirm mingw-w64-x86_64-curl
          pacman -Syu --noconfirm mingw-w64-x86_64-glpk
          pacman -Syu --noconfirm mingw-w64-x86_64-gmp
          pacman -Syu --noconfirm mingw-w64-x86_64-libxml2
          pacman -Syu --noconfirm mingw-w64-x86_64-libpng
          pacman -Syu --noconfirm mingw-w64-x86_64-libuv
          pacman -Syu --noconfirm mingw-w64-x86_64-make
          pacman -Syu --noconfirm mingw-w64-x86_64-netcdf
          pacman -Syu --noconfirm mingw-w64-x86_64-nlopt
          pacman -Syu --noconfirm mingw-w64-ucrt-x86_64-cmake
          pacman -Syu --noconfirm mingw-w64-ucrt-x86_64-curl
          pacman -Syu --noconfirm mingw-w64-ucrt-x86_64-glpk
          pacman -Syu --noconfirm mingw-w64-ucrt-x86_64-gmp
          pacman -Syu --noconfirm mingw-w64-ucrt-x86_64-libxml2
          pacman -Syu --noconfirm mingw-w64-ucrt-x86_64-libpng
          pacman -Syu --noconfirm mingw-w64-ucrt-x86_64-libuv
          pacman -Syu --noconfirm mingw-w64-ucrt-x86_64-make
          pacman -Syu --noconfirm mingw-w64-ucrt-x86_64-netcdf
          pacman -Syu --noconfirm mingw-w64-ucrt-x86_64-nlopt
        shell: pwsh

      - name: Install R dependencies
        run: |
          options(
            crayon.enabled = TRUE,
            install.packages.check.source = "no",
            pkgType = ifelse(grepl("linux", R.version$os), "source", "binary")
          )
          install.packages("remotes")
          remotes::install_cran("covr")
          remotes::install_cran("curl")
          remotes::install_cran("devtools")
          remotes::install_cran("htmltools")
          remotes::install_cran("lintr")
          remotes::install_cran("pkgdown")
          remotes::install_cran("rcmdcheck")
          remotes::install_cran("rmarkdown")
          remotes::install_cran("roxygen2")
          remotes::install_cran("sessioninfo")
          remotes::install_cran("styler")
          remotes::install_deps(dependencies = TRUE)
          remotes::install_local(".")
        shell: Rscript {0}

      - name: Print R session information
        run: |
          options(width = 100)
          pkgs <- installed.packages()[, "Package"]
          sessioninfo::session_info(pkgs, include_base = TRUE)
        shell: Rscript {0}

      - name: R CMD check
        if: success()
        uses: r-lib/actions/check-r-package@master
        with:
          args: 'c("--no-manual", "--as-cran")'
          build_args: 'c("--no-manual")'
          error-on: '"warning"'
          check-dir: '"check"'
          working-directory: '.'

      - name: Show testthat output
        if: always()
        run: |
          set -x
          find . -name 'testthat.Rout*' -printf '%p\n' -exec cat '{}' \; || true
        shell: bash

      - name: Upload check results
        if: failure()
        uses: actions/upload-artifact@main
        with:
          name: ${{ runner.os }}-r${{ matrix.r }}-results
          path: check

      - name: Install revdepcheck
        if: matrix.os == needs.initiate.outputs.os_linux && matrix.r == needs.initiate.outputs.r_devel && (contains(github.event.head_commit.message, '[revdep]') || github.event.inputs.revdep == 'true')
        run: |
          remotes::install_github("r-lib/revdepcheck")
        shell: Rscript {0}

      - name: Run revdepcheck
        if: matrix.os == needs.initiate.outputs.os_linux && matrix.r == needs.initiate.outputs.r_devel && (contains(github.event.head_commit.message, '[revdep]') || github.event.inputs.revdep == 'true')
        run: |
          options(crayon.enabled = TRUE)
          revdepcheck::revdep_reset()
          revdepcheck::revdep_check(timeout = as.difftime(60, units = "mins"), num_workers = 1, bioc = TRUE)
          revdepcheck::revdep_reset()
        shell: Rscript {0}

      - name: Remove revdep library
        if: matrix.os == needs.initiate.outputs.os_linux && matrix.r == needs.initiate.outputs.r_devel && (contains(github.event.head_commit.message, '[revdep]') || github.event.inputs.revdep == 'true')
        run: |
          rm -Rf revdep/library*
        shell: bash

      - name: Upload revdep results
        if: matrix.os == needs.initiate.outputs.os_linux && matrix.r == needs.initiate.outputs.r_devel && (contains(github.event.head_commit.message, '[revdep]') || github.event.inputs.revdep == 'true')
        uses: actions/upload-artifact@main
        with:
          name: revdep-results
          path: revdep

      - name: Build packages
        if: success()
        run: |
          options(crayon.enabled = TRUE)
          src <- pkgbuild::build(".", dest_path = tempdir(), vignettes = FALSE, manual = FALSE, binary = FALSE)
          bin <- pkgbuild::build(".", dest_path = tempdir(), vignettes = FALSE, manual = FALSE, binary = TRUE)
          dir.create("build")
          file.copy(c(src, bin), "build")
        shell: Rscript {0}

      - name: Upload packages
        uses: actions/upload-artifact@main
        with:
          name: ${{ needs.initiate.outputs.pkg_name }}_${{ needs.initiate.outputs.pkg_version }}_R-${{ matrix.r }}_${{ matrix.os }}
          path: build

      - name: Style and format R code
        if: success() && matrix.os == needs.initiate.outputs.os_linux && matrix.r == needs.initiate.outputs.r_devel
        run: |
          set -x
          Rscript -e 'styler::style_pkg(exclude_files = list.files("./R", pattern = "^RcppExports.*", full.names = TRUE))'
        shell: bash

      - name: Style and format C/C++ code
        if: success() && matrix.os == needs.initiate.outputs.os_linux && matrix.r == needs.initiate.outputs.r_devel
        run: |
          set -x
          find . -type f \( -name '*.h' -o -name '*.hpp' -o -name '*.c' -o -name '*.cc' -o -name '*.cpp' -o -name '*.cxx' \) ! -path "*/RcppExports.*" ! -path "./check/*" ! -path "./build/*" -printf '%p\n' -exec clang-format -style=Google --verbose -i {} \; || true
        shell: bash

      - name: Cleanup R/C/C++ code (Remove whitespaces)
        if: success() && matrix.os == needs.initiate.outputs.os_linux && matrix.r == needs.initiate.outputs.r_devel
        run: |
          set -x
          find . -type f \( -name 'DESCRIPTION' -o -name "*.R" -o -name "*.stan" \) ! -path "*/RcppExports.*" ! -path "./check/*" ! -path "./build/*" -printf '%p\n' -exec sed -i -e 's/[ \t]*$//' {} \; || true
          find . -type f \( -name '*.h' -o -name '*.hpp' -o -name '*.c' -o -name '*.cc' -o -name '*.cpp' -o -name '*.cxx' \) ! -path "*/RcppExports.*" ! -path "./check/*" ! -path "./build/*" -printf '%p\n' -exec sed -i -e 's/[ \t]*$//' {} \; || true
        shell: bash

      - name: Render documents
        if: success() && matrix.os == needs.initiate.outputs.os_linux && matrix.r == needs.initiate.outputs.r_devel
        run: |
          options(crayon.enabled = TRUE)
          if (file.exists("README.Rmd")) rmarkdown::render("README.Rmd", output_format = "md_document")
          roxygen2::roxygenize()
        shell: Rscript {0}

      - name: Commit changes
        if: success() && matrix.os == needs.initiate.outputs.os_linux && matrix.r == needs.initiate.outputs.r_devel
        run: |
          set -x
          git config --local user.name "$GITHUB_ACTOR"
          git config --local user.email "$GITHUB_ACTOR@users.noreply.github.com"
          find . -type f \( -name 'DESCRIPTION' -o -name "*.R" -o -name "*.stan" \) ! -path "*/RcppExports.*" ! -path "./check/*" ! -path "./build/*" -printf '%p\n' -exec git add {} \; || true
          git commit -m 'Styling and formatting R code using `styler`' || echo 'No changes to commit'
          find . -type f \( -name '*.h' -o -name '*.hpp' -o -name '*.c' -o -name '*.cc' -o -name '*.cpp' -o -name '*.cxx' \) ! -path "*/RcppExports.*" ! -path "./check/*" ! -path "./build/*" -printf '%p\n' -exec git add {} \; || true
          git commit -m 'Styling and formatting C/C++ code using `clang-format`' || echo 'No changes to commit'
          git add README.md NAMESPACE man/\* || true
          git commit -m 'Roxygenize and render documents' || echo 'No changes to commit'
          git add revdep/\* || true
          git commit -m 'Update revdep results' || echo 'No changes to commit'
          git push origin || echo "No changes to commit"
        shell: bash

      - name: Push changes to pull request
        if: success() && matrix.os == needs.initiate.outputs.os_linux && matrix.r == needs.initiate.outputs.r_devel && github.event.issue.pull_request
        uses: r-lib/actions/pr-push@master
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Analyze R code
        if: success() && matrix.os == needs.initiate.outputs.os_linux && matrix.r == needs.initiate.outputs.r_devel
        run: |
          options(crayon.enabled = TRUE)
          lintr::lint_package()
        shell: Rscript {0}

      - name: Analyze unit test coverage
        if: success() && matrix.os == needs.initiate.outputs.os_linux && matrix.r == needs.initiate.outputs.r_devel
        run: |
          options(crayon.enabled = TRUE)
          covr::codecov(type = "all", line_exclusions = NULL, function_exclusions = NULL)
        shell: Rscript {0}

      - name: Deploy package website
        if: success() && matrix.os == needs.initiate.outputs.os_linux && matrix.r == needs.initiate.outputs.r_devel
        run: |
          set -x
          git config --local user.name "$GITHUB_ACTOR"
          git config --local user.email "$GITHUB_ACTOR@users.noreply.github.com"
          Rscript -e 'pkgdown::deploy_to_branch(new_process = FALSE)'
        shell: bash

  release:
    name: Create release
    if: contains(github.event.head_commit.message, '[release]') || github.event.inputs.release == 'true'
    runs-on: ${{ needs.initiate.outputs.os_linux }}
    timeout-minutes: 360
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}

    needs: [initiate, check]

    strategy:
      fail-fast: true

    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Create release
        if: success()
        id: create_release
        uses: actions/create-release@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.initiate.outputs.pkg_version }}
          release_name: ${{ needs.initiate.outputs.pkg_name }} ${{ needs.initiate.outputs.pkg_version }}
          body: |
            Check changes in [NEWS.md](NEWS.md).
          draft: false
          prerelease: false

  upload-src:
    name: Upload source package
    if: contains(github.event.head_commit.message, '[release]') || github.event.inputs.release == 'true'
    runs-on: ${{ needs.initiate.outputs.os_linux }}
    timeout-minutes: 360

    needs: [initiate, check, release]

    strategy:
      fail-fast: true

    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@main
        with:
          path: ./

      - name: Set up system environment
        id: artifacts
        run: |
          ls -R
          export ARTIFACT_PATH="${{ needs.initiate.outputs.pkg_name }}_${{ needs.initiate.outputs.pkg_version }}_R-${{ needs.initiate.outputs.r_devel }}_${{ needs.initiate.outputs.os_linux }}"
          echo "::set-output name=artifact_path::$ARTIFACT_PATH"
        shell: bash

      - name: Upload source package
        uses: actions/upload-release-asset@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: ${{ steps.artifacts.outputs.artifact_path }}/${{ needs.initiate.outputs.pkg_name }}_${{ needs.initiate.outputs.pkg_version }}.tar.gz
          asset_name: ${{ needs.initiate.outputs.pkg_name }}_${{ needs.initiate.outputs.pkg_version }}.tar.gz
          asset_content_type: application/gzip

  upload-bin:
    name: Upload R-${{ matrix.r }} | ${{ matrix.os }}
    if: contains(github.event.head_commit.message, '[release]') || github.event.inputs.release == 'true'
    runs-on: ${{ needs.initiate.outputs.os_linux }}
    timeout-minutes: 360

    needs: [initiate, check, release, upload-src]

    strategy:
      fail-fast: true
      matrix:
        r:
          - ${{ needs.initiate.outputs.r_release }}
          - ${{ needs.initiate.outputs.r_oldrel }}
        os:
          - ${{ needs.initiate.outputs.os_linux }}
          - ${{ needs.initiate.outputs.os_macos }}
          - ${{ needs.initiate.outputs.os_windows }}
        include:
          - r: ${{ needs.initiate.outputs.r_devel }}
            os: ${{ needs.initiate.outputs.os_linux }}

    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@main
        with:
          path: ./

      - name: Set up system environment
        id: artifacts
        run: |
          ls -R
          export ARTIFACT_PATH="${{ needs.initiate.outputs.pkg_name }}_${{ needs.initiate.outputs.pkg_version }}_R-${{ matrix.r }}_${{ matrix.os }}"
          zip -rj $ARTIFACT_PATH.zip $ARTIFACT_PATH/*
          echo "::set-output name=artifact_path::$ARTIFACT_PATH"
        shell: bash

      - name: Upload release assets
        uses: actions/upload-release-asset@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: ${{ steps.artifacts.outputs.artifact_path }}.zip
          asset_name: ${{ steps.artifacts.outputs.artifact_path }}.zip
          asset_content_type: application/zip
